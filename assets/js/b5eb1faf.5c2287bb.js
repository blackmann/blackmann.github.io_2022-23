"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[29],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8766:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:2,slug:"/setting-up-k8s-do"},l="Setting up Kubernetes on Digital Ocean For Production",c={unversionedId:"notes/setting-up-k8s-do",id:"notes/setting-up-k8s-do",title:"Setting up Kubernetes on Digital Ocean For Production",description:"After provisioning Kubernetes on DigitalOcean, it's not really clear what the next steps are. DigitalOcean already",source:"@site/docs/notes/setting-up-k8s-do.md",sourceDirName:"notes",slug:"/setting-up-k8s-do",permalink:"/docs/setting-up-k8s-do",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/setting-up-k8s-do"},sidebar:"default",previous:{title:"Preface",permalink:"/docs/notes"}},u={},p=[{value:"Install Ingress Nginx Controller",id:"install-ingress-nginx-controller",level:2},{value:"Set default ingress class",id:"set-default-ingress-class",level:4},{value:"Set up cert-manager",id:"set-up-cert-manager",level:2},{value:"Install CRDs",id:"install-crds",level:3},{value:"Create an Issuer",id:"create-an-issuer",level:3},{value:"Create an Access Token",id:"create-an-access-token",level:4},{value:"Create/Define an Issuer",id:"createdefine-an-issuer",level:4},{value:"Done",id:"done",level:3},{value:"Deploy",id:"deploy",level:2},{value:"Container Registry",id:"container-registry",level:3},{value:"Resource File",id:"resource-file",level:3},{value:"Pod-pod communication",id:"pod-pod-communication",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setting-up-kubernetes-on-digital-ocean-for-production"},"Setting up Kubernetes on Digital Ocean For Production"),(0,o.kt)("p",null,"After provisioning Kubernetes on DigitalOcean, it's not really clear what the next steps are. DigitalOcean already\nshares a guide on how to set\nup ",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes"},"here"),"\n.\nHowever, after trying to set up k8s on DO for production so many times, I've built enough understanding to derive a\nmore straightforward approach (per my taste)."),(0,o.kt)("p",null,"This guide also considers that you use DigitalOcean's container registry."),(0,o.kt)("p",null,"To organise the Kubernetes resources (yaml files, etc) we create while following this guide,\ncreate a folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"devops")," (for example) in your Documents or wherever you keep code."),(0,o.kt)("p",null,"Let's get in."),(0,o.kt)("h2",{id:"install-ingress-nginx-controller"},"Install Ingress Nginx Controller"),(0,o.kt)("p",null,"First you need to install Nginx controller which in turn will spawn a load balancer.\nThis is required so that you can be able to access services from your cluster using domain names.\nEnter the following command to install the controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/do/deploy.yaml\n")),(0,o.kt)("p",null,"On the ",(0,o.kt)("inlineCode",{parentName:"p"},"Networking > Load Balancers")," page, you should notice a Load Balancer spawn.\nYou should wait for it to complete before proceeding to the next step."),(0,o.kt)("p",null,"You can also check for Ingress Nginx readiness by running this command against your cluster."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k get svc -n ingress-nginx \n")),(0,o.kt)("p",null,"You should notice a similar table. What to look out for is an external IP for ",(0,o.kt)("inlineCode",{parentName:"p"},"ingress-nginx-controller"),".\nIf it's unavailable, then your Load Balancer may still be spawning. You can check the DO dashboard."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NAME                                 TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)                      AGE\ningress-nginx-controller             LoadBalancer   10.0.0.1        10.0.0.3       80:31710/TCP,443:31213/TCP   3m\ningress-nginx-controller-admission   ClusterIP      10.0.0.2        <none>         443/TCP                      3m\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You'll find the installation guide\nhere: ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean"},"Ingress Nginx / Installation Guide"))),(0,o.kt)("h4",{id:"set-default-ingress-class"},"Set default ingress class"),(0,o.kt)("p",null,"We need to set the Nginx controller we just installed as the default ingress class",(0,o.kt)("sup",null,"1"),"."),(0,o.kt)("p",null,"Run the following command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k edit -n ingress-nginx ingressclass nginx\n")),(0,o.kt)("p",null,"This will open the nginx ",(0,o.kt)("inlineCode",{parentName:"p"},"IngressClass")," resource in a vim (terminal) editor.\nNow add the following highlighted annotation."),(0,o.kt)("p",null,"Note that, ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.annotations")," may already have an entry (",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl.kubernetes.io/last-applied-configuration"),").\nJust add this new entry below it. Please follow the indentation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{3}","{3}":!0},'metadata:\n  annotations:\n    ingressclass.kubernetes.io/is-default-class: "true"\n')),(0,o.kt)("h2",{id:"set-up-cert-manager"},"Set up cert-manager"),(0,o.kt)("p",null,"This is needed to issue certificates for our services."),(0,o.kt)("h3",{id:"install-crds"},"Install CRDs"),(0,o.kt)("p",null,"Run the following command to install ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," resource definitions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml\n")),(0,o.kt)("p",null,"To verify if that went well, run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k get pods -n cert-manager\n")),(0,o.kt)("p",null,"You should expect a similar table/state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NAME                                       READY   STATUS    RESTARTS   AGE\ncert-manager-7dd5854bb4-7rpzw              1/1     Running   0          1m\ncert-manager-cainjector-64c049654c-6pm5p   1/1     Running   0          1m\ncert-manager-webhook-6bdgfc7c9d-xfszq      1/1     Running   0          1m\n")),(0,o.kt)("h3",{id:"create-an-issuer"},"Create an Issuer"),(0,o.kt)("p",null,"I personally prefer the ACME (LetsEncrypt) issuer and ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS-01")," verification method.\nSo I'm providing the guide in that respect:"),(0,o.kt)("p",null,"First let me explain how this works. When you deploy a service, the cert manager requests for a certificate\nfrom our issuer (LetsEncrypt). But the issuer needs to verify that you own the domain. Now, there are\ntwo methods to verify. ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP01")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS01"),"."),(0,o.kt)("p",null,"The difference between them is that, the former requires you to serve a verification key on a certain path on your\nweb service (and should be on the domain you're signing). The latter however checks for verification values from\nyour DNS records.",(0,o.kt)("sup",null,"2")),(0,o.kt)("p",null,"Note that, these methods don't require you to manually set them up. That's what ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," is for."),(0,o.kt)("p",null,"Since we're going to ",(0,o.kt)("em",{parentName:"p"},"prefer")," ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS01")," method, we need to allow ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," to alter our DNS records when needed. To\ndo that we need to supply it with an access token."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This article also assumes your nameservers have been moved to DigitalOcean.")),(0,o.kt)("h4",{id:"create-an-access-token"},"Create an Access Token"),(0,o.kt)("p",null,"Follow this short guide to create an access\ntoken: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.digitalocean.com/reference/api/create-personal-access-token/"},"DO/Create Personal Access Token"),".\nRemember to check write access."),(0,o.kt)("p",null,"Copy the access token and run this command to encode it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo -n 'your-access-token' | base64\n")),(0,o.kt)("p",null,"Then create a resource ",(0,o.kt)("inlineCode",{parentName:"p"},"Secret")," resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{7} title="devops/do-token.yml"',"{7}":!0,title:'"devops/do-token.yml"'},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: digitalocean-dns\ndata:\n  # set the value of access-token to the encoded value\n  access-token: "base64 encoded access-token here"\n')),(0,o.kt)("p",null,"Now apply this secret (to the ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," namespace)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k apply -n cert-manager -f do-token.yml\n")),(0,o.kt)("h4",{id:"createdefine-an-issuer"},"Create/Define an Issuer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{10,23} title="devops/issuer.yml"',"{10,23}":!0,title:'"devops/issuer.yml"'},'apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-default\nspec:\n  acme:\n    # replace with your email. this email will be notified when\n    # the certificate is about to expire. but you need not worry\n    # because cert-manager will automatically renew certificates\n    email: youremail@provider.com \n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: default-issuer # can be any name\n    solvers:\n      - dns01:\n          digitalocean:\n            tokenSecretRef:\n              name: digitalocean-dns\n              key: access-token\n        selector:\n          dnsZones:\n            # remember to use your domain\n            - "example.com"\n')),(0,o.kt)("p",null,"Apply with the following command (on the ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," namespace)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k apply -f issuer.yml\n\n# verify with\nk get clusterissuer\n")),(0,o.kt)("h3",{id:"done"},"Done"),(0,o.kt)("p",null,"That's it. Now we can make some deployments."),(0,o.kt)("h2",{id:"deploy"},"Deploy"),(0,o.kt)("p",null,"Deployments normally refer to a combination of pod and replica set definitions in single file.\nBut I prefer to set up deployments as a combination of pod, replica set, service and ingress definitions in a single\nfile."),(0,o.kt)("h3",{id:"container-registry"},"Container Registry"),(0,o.kt)("p",null,"I use DigitalOcean's container registry to host my docker images. If this is the same for you, then you need add the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Secret")," required to pull images from your registry."),(0,o.kt)("p",null,"To do that, go to ",(0,o.kt)("inlineCode",{parentName:"p"},"Container Registry > Settings"),'. Then click "Edit" in the ',(0,o.kt)("inlineCode",{parentName:"p"},"DigitalOcean Kubernetes integration"),'\nsection. Now select your k8s cluster and click "Save All".'),(0,o.kt)("h3",{id:"resource-file"},"Resource File"),(0,o.kt)("p",null,"Time to put together a deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{6,8,13,17,21,34,41,45,54,57,64,67,69,74} title="deployment.yml"',"{6,8,13,17,21,34,41,45,54,57,64,67,69,74}":!0,title:'"deployment.yml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  # you can call this deployment anything you want\n  # it doesn't have to have \"service\" in the name either\n  name: api-service\n  labels:\n    app: api-service\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: api-service\n  template:\n    metadata:\n      labels:\n        app: api-service\n    spec:\n      containers:\n          # you can name it anything\n        - name: api\n          # set the correct values for `registry-name` and `image`\n          image: registry.digitalocean.com/<registry-name>/<image>\n          ports:\n            - containerPort: 80\n          env:\n            - name: ENV_VARIABLE_1\n              value: env_value\n            - name: ENV_VARIABLE_2\n              value: another_env_value\n      imagePullSecrets:\n        # replace this with the name of your container registry\n        # if you're using digital ocean's registry\n        - name: <container-registry-name>\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  # you can name the service anything\n  name: api-service\nspec:\n  selector:\n    # but this selector should match the labels.app above\n    app: api-service\n  ports:\n    - protocol: TCP\n      port: 80\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-ingress\n  annotations:\n    # remember this issuer we created before?\n    cert-manager.io/cluster-issuer: letsencrypt-default\nspec:\n  # you don't need this if you set the default nginx class before\n  ingressClassName: nginx\n  tls:\n    - hosts:\n        # this is the domain you want to use for your app\n        - api.example.com\n      # this will be used to name the certificate secret generated by cert-manager\n      # use any value. but should be unique per deployment\n      secretName: api-example-com-cert\n  rules:\n    - host: api.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: api-service\n                port:\n                  number: 80\n            pathType: Prefix\n            path: /\n\n")),(0,o.kt)("p",null,"Now run the follow command to deploy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k apply -f deployment.yml\n")),(0,o.kt)("p",null,"You're done. Your pods will spawn. Cert-manager will request for certificate issuance from LetsEncrypt.\nAnd in a matter of seconds your service will be ready for the world to access."),(0,o.kt)("p",null,"Enjoy!"),(0,o.kt)("h2",{id:"pod-pod-communication"},"Pod-pod communication"),(0,o.kt)("p",null,"If you have services that may communicate with each other, you may experience an ",(0,o.kt)("inlineCode",{parentName:"p"},"ECONNRESET")," error. The solution for\nthis is to specify the hostname of the load balancer in the nginx service configuration."),(0,o.kt)("p",null,"To do this, add an ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," record to your DNS record: hostname as ",(0,o.kt)("inlineCode",{parentName:"p"},"lb.example.com")," and will direct to the IP address of the\nload balancer configured to your cluster."),(0,o.kt)("p",null,"Then edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"ingress-nginx-controller"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"k edit -n ingress-nginx svc ingress-nginx-controller\n")),(0,o.kt)("p",null,"Add the following config under ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.annotations")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:"{3}","{3}":!0},'metadata:\n  annotations:\n    service.beta.kubernetes.io/do-loadbalancer-hostname: "lb.example.com"\n')),(0,o.kt)("p",null,"And save. That's it."),(0,o.kt)("hr",null),(0,o.kt)("ol",{class:"footnotes"},(0,o.kt)("li",null,"Reason can be found here: ",(0,o.kt)("a",{href:"https://kubernetes.github.io/ingress-nginx/#what-is-an-ingressclass-and-why-is-it-important-for-users-of-ingress-nginx-controller-now"},"https://kubernetes.github.io/ingress-nginx/#what-is-an-ingressclass-and-why-is-it-important-for-users-of-ingress-nginx-controller-now")),(0,o.kt)("li",null,"Read a little more here: ",(0,o.kt)("a",{href:"https://cert-manager.io/docs/configuration/acme/#solving-challenges"},"https://cert-manager.io/docs/configuration/acme/#solving-challenges"))))}m.isMDXComponent=!0}}]);