"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[312],{3681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>w,contentTitle:()=>y,default:()=>k,frontMatter:()=>p,metadata:()=>h,toc:()=>g});var o=t(7462),r=t(7294),a=t(3905),i=t(9477);const s="waveMotion_ARjR",c="waveMotionBrand_BHH0",v="waveMotionTitle_VsaQ",m="waveMotionModel_wtNy",l="waveMotionHeader_ext5",d="waveMotionForeground_qvb8",x="waveMotionBackground_rgju",u="waveMotionBody_NebJ";t(4921);function f(e){let{children:n,image:t,model:o,number:a}=e;const f=r.useRef(),p=r.useRef();return r.useEffect((()=>{const[e,n]=function(e){let{canvas:n,container:t,image:o}=e;function r(){const{width:e}=t.getBoundingClientRect(),n=e/.8;c.setSize(e,n),c.setPixelRatio(Math.min(2,window.devicePixelRatio))}let a=!1;const s=new i.xsS,c=new i.CP7({alpha:!0,canvas:n});r();const v=new i.cPb(75,.8);v.position.z=.5,s.add(v);const m=new i._12(.4,.6,16,16),l=new i.jyz({fragmentShader:"#define GLSLIFY 1\nvarying vec2 vUv;\nvarying float vWave;\nvarying float vTextureRedOffset;\nuniform sampler2D uTexture;\n\nvoid main() {\n    float wave = vWave * 0.6;\n    float redWave = vWave - vTextureRedOffset;\n\n    float r = texture2D(uTexture, vUv + redWave).r;\n    float g = texture2D(uTexture, vUv).g;\n    float b = texture2D(uTexture, vUv + wave).b;\n\n    gl_FragColor = vec4(vec3(r,g,b), 1.);\n}\n",vertexShader:"#define GLSLIFY 1\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_0(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nvarying vec2 vUv;\nuniform float uTime;\nuniform float uRedOffset;\nvarying float vTextureRedOffset;\nvarying float vWave;\n\nvoid main() {\n    vUv = uv;\n\n    vec3 pos = position;\n    float noiseFreq = 5.5;\n    float noiseAmp = 0.03;\n    vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n    pos.z += snoise(noisePos) * noiseAmp;\n    vWave = pos.z;\n    vTextureRedOffset = uRedOffset;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n}",uniforms:{uTime:{value:1},uTexture:{value:(new i.dpR).load(o)},uRedOffset:0}}),d=new i.Kj0(m,l);return s.add(d),function e(){c.render(s,v),l.uniforms.uTime.value+=a?.03*Math.random():0,l.uniforms.uRedOffset+=a?.025:0,window.requestAnimationFrame(e)}(),window.addEventListener("resize",r),[function(){window.removeEventListener("resize",r)},function(e){a=e}]}({canvas:f.current,container:p.current,image:t});return p.current.addEventListener("mouseover",(function(){n(!0)})),p.current.addEventListener("mouseout",(function(){n(!1)})),e}),[]),r.createElement("div",{className:s,ref:p},r.createElement("header",{className:l},r.createElement("canvas",{className:x,ref:f}),r.createElement("div",{className:d},r.createElement("h2",{className:v},a),r.createElement("footer",null,r.createElement("span",{className:c},"G - M e t a l"),r.createElement("span",{className:m},o)))),r.createElement("div",{className:u},n))}const p={sidebar_position:2},y="Wave motion",h={unversionedId:"rnds/wave-motion",id:"rnds/wave-motion",title:"Wave motion",description:"This is a WebGL project completed with threejs. I made the renders with Blender. Hover over a",source:"@site/docs/rnds/wave-motion.mdx",sourceDirName:"rnds",slug:"/rnds/wave-motion",permalink:"/docs/rnds/wave-motion",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"rnd",previous:{title:"Donuts Galaxy",permalink:"/docs/rnds/donuts-galaxy"},next:{title:"Text Spawn",permalink:"/docs/rnds/text-spawn"}},w={},g=[{value:"Reference",id:"reference",level:3}],b={toc:g};function k(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wave-motion"},"Wave motion"),(0,a.kt)("p",null,"This is a WebGL project completed with ",(0,a.kt)("a",{parentName:"p",href:"https://threejs.org"},"threejs"),". I made the renders with Blender. Hover over a\n",(0,a.kt)("em",{parentName:"p"},"robo")," item to experience the waves."),(0,a.kt)("div",{className:"row"},(0,a.kt)("div",{className:"col col--6"},(0,a.kt)(f,{image:"/img/0012.jpg",model:"Sigma",number:"XXIV",mdxType:"WaveMotion"},(0,a.kt)("p",null,"Making no mistakes is what establishes the certainty of victory, for it means conquering an enemy that is already defeated."))),(0,a.kt)("div",{className:"col col--6"},(0,a.kt)(f,{image:"/img/0013.jpg",model:"Omega",number:"MMXXI",mdxType:"WaveMotion"},(0,a.kt)("p",null,"If you know the enemy and know yourself, you need not fear the result of a hundred battles. If you know yourself but not the enemy, for every victory gained you will also suffer defeat."),(0,a.kt)("p",null,"If you know neither the enemy nor yourself, you will succumb in every battle.")))),(0,a.kt)("h3",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tutorial: ",(0,a.kt)("a",{parentName:"li",href:"https://tympanus.net/codrops/2020/03/17/create-a-wave-motion-effect-on-an-image-with-three-js/"},"https://tympanus.net/codrops/2020/03/17/create-a-wave-motion-effect-on-an-image-with-three-js/")),(0,a.kt)("li",{parentName:"ul"},"Shader understanding: ",(0,a.kt)("a",{parentName:"li",href:"https://thebookofshaders.com"},"https://thebookofshaders.com"))))}k.isMDXComponent=!0}}]);